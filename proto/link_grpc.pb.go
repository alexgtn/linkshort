// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package link

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkshortServiceClient is the client API for LinkshortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkshortServiceClient interface {
	Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectReply, error)
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkReply, error)
}

type linkshortServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkshortServiceClient(cc grpc.ClientConnInterface) LinkshortServiceClient {
	return &linkshortServiceClient{cc}
}

func (c *linkshortServiceClient) Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectReply, error) {
	out := new(RedirectReply)
	err := c.cc.Invoke(ctx, "/user.LinkshortService/Redirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkshortServiceClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkReply, error) {
	out := new(CreateLinkReply)
	err := c.cc.Invoke(ctx, "/user.LinkshortService/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkshortServiceServer is the server API for LinkshortService service.
// All implementations must embed UnimplementedLinkshortServiceServer
// for forward compatibility
type LinkshortServiceServer interface {
	Redirect(context.Context, *RedirectRequest) (*RedirectReply, error)
	CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkReply, error)
	mustEmbedUnimplementedLinkshortServiceServer()
}

// UnimplementedLinkshortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinkshortServiceServer struct {
}

func (UnimplementedLinkshortServiceServer) Redirect(context.Context, *RedirectRequest) (*RedirectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedLinkshortServiceServer) CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedLinkshortServiceServer) mustEmbedUnimplementedLinkshortServiceServer() {}

// UnsafeLinkshortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkshortServiceServer will
// result in compilation errors.
type UnsafeLinkshortServiceServer interface {
	mustEmbedUnimplementedLinkshortServiceServer()
}

func RegisterLinkshortServiceServer(s grpc.ServiceRegistrar, srv LinkshortServiceServer) {
	s.RegisterService(&LinkshortService_ServiceDesc, srv)
}

func _LinkshortService_Redirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkshortServiceServer).Redirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.LinkshortService/Redirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkshortServiceServer).Redirect(ctx, req.(*RedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkshortService_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkshortServiceServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.LinkshortService/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkshortServiceServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkshortService_ServiceDesc is the grpc.ServiceDesc for LinkshortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkshortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.LinkshortService",
	HandlerType: (*LinkshortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Redirect",
			Handler:    _LinkshortService_Redirect_Handler,
		},
		{
			MethodName: "CreateLink",
			Handler:    _LinkshortService_CreateLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "link.proto",
}
